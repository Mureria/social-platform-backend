Layout

Controllers <contain functions for CRUD operations.>
Model <data structure and interactions with the database.>
Middleware < functions for tasks like authentication, authorization, and request validation.>
Routes <API endpoints for users, posts, and comments>
server.js < Express.js server, connect to the MongoDB database, and define the main API routes.>


CRUD functionalities for:
// users
// posts
// comments
// likes
// followers
Additional features

// Register
// register user CREATE
// SINGLE USER GET
// ALL USERS GET 
// Update single user PUT
// Delete user DELETE

// Login User
// Json Webtoken (Access)
// username & password (bycrpt na hashpassword)
// validation
//edge cases

Branches
// main
// develop


// POST 
// Create single post, get all post, update post & delete post, get singler user posts, user id

//comment
//created at:























































































































































router.post("/login", async (req, res) => {
    try {
      // Get user input
      const { email, password } = req.body;
  
      // Validate user input
      if (!(email && password)) {
        res.status(400).send("All input is required");
      }
      // Validate if user exist in our database
      const user = await User.findOne({ email });
  
      if (user && (await bcrypt.compare(password, user.password))) {
        // Create token
        const token = jwt.sign(
          { user_id: user._id, email },
          process.env.TOKEN_KEY,
          {
            expiresIn: "2h",
          }
        );
  
        // save user token
        user.token = token;
  
        // user
        res.status(200).json(user);
      }
      res.status(400).send("Invalid Credentials");
    } catch (err) {
      console.log(err);
    }
  });

 